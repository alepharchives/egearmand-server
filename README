=== introduction

An experimental Gearmand distributed server written in Erlang with all the things Gearman should not have: replicated persistent queues,
incipient error recovery and support for clustering.

=== dependencies

Erlang (tested with OTP R13B01),
Ruby and Rake for compiling
erlang-rfc4627 (included in the contrib directory)

=== OTP application support

The server can be started as an OTP application, try.
> application:start(egearmand) .
You can change the configuration of the application editing the
file ebin/egearmand.app, editing the host, port, and log mechanism.

=== extensions

From version 0.3 the server has initial support for extensions.
An extension connecting the Gearman server implementation to the
RabbitMQ queue system is included. To use the extension, be sure
you have erlang-rfc4627 in the path and before calling to
gearmand:start(), invoke rabbitmq_extension:start() from the
erlang shell.
There are examples in the /examples direcytory  of three ruby
scripts creating, publishing and consuming messages from a queue
through the egearmand server.

=== tests

Few and scattered through the source files.
To run all the tests, starts the erlang shell with the loaded code of the server and run:
> tests:test() .

=== configuration

By now in file src/configuration.erl. Take a look at the comments.
It must be edited before compiling.
If you want to use persistent queues, you must create the replicated Mnesia schema before calling to gearmand:start().
You can use mnesia_store:create_tables(), after initiating calling to mnesia:create_schema(configuration:gearmand_nodes()).

=== compile

$rake

=== running

./egearmand [-host host] [-port port] [-log path] [-level (debug | info | warning | error)]

=== examples

The distribution includes some examples of clients and workers using to test the server and the RabbitMQ extension.
The examples are coded in Ruby, and use the xing-gearman-ruby gem to work. You can obtain it from github: git://github.com/xing/gearman-ruby.git